def build_postorder(preorder, inorder):
  if not preorder or not inorder:
    return []
  root = preorder[0] 
  root_index = inorder.index(root)
  left_inorder = inorder[:root_index]
  right_inorder = inorder[root_index + 1:]
  left_preorder = preorder[1:1+len(left_inorder)]
  right_preorder = preorder[1+len(left_inorder):]
  left_subtree = build_postorder(left_preorder, left_inorder)
  right_subtree = build_postorder(right_preorder, right_inorder)
  return left_subtree + right_subtree + [root]

n = int(input())
preorder = [int(x) for x in input().split()]
inorder = [int(x) for x in input().split()]
postorder = build_postorder(preorder, inorder)
postorder = [str(x) for x in postorder]
print(" ".join(postorder))
