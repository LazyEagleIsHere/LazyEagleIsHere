#include <iostream>
#include <vector>
using namespace std;
void merge(vector<int>& arr, int l, int m, int r) {
  int n1 = m - l + 1;
  int n2 = r - m;
  vector<int> L(n1);
  vector<int> R(n2);
  for (int i = 0; i < n1; i++) {
    L[i] = arr[l + i];
  }
  for (int j = 0; j < n2; j++) {
    R[j] = arr[m + 1 + j];
  }
  int i = 0;
  int j = 0;
  int k = l;
  while (i < n1 && j < n2) {
    if (L[i] <= R[j]) {
      arr[k] = L[i];
      i++;
    }else {
      arr[k] = R[j];
      j++;
    }
    k++;
  }
  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }
  while (j < n2) {
    arr[k] = R[j];
    j++;
    k++;
  }
}

void mergeSort(vector<int>& arr, int l, int r) {
  if (l < r) {
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
  }
}

int main() {
  int N;
  cin >> N;
  vector<int> A_list(N);
  vector<int> B_list(N);
  for (int i = 0; i < N; i++) {
    cin >> A_list[i];
  }
  for (int i = 0; i < N; i++) {
    cin >> B_list[i];
  }
  mergeSort(A_list, 0, N - 1);
  mergeSort(B_list, 0, N - 1);
  int win = 0;
  while (B_list.size() > 0) {
    if (B_list.back() < A_list.back()) {
      A_list.pop_back();
      B_list.pop_back();
      win++;
    }else {
      B_list.pop_back();
    }
  }
  cout << win << endl;
  return 0;
}
